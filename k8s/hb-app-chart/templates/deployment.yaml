apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-deployment"
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
spec:
  replicas: {{ .Values.replicaCount }}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        code-basics/web-pod: "{{ .Release.Name }}-{{ .Values.version }}-web-pod"
    spec:
      imagePullSecrets:
        - name: docker-config

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "code-basics/web-pod"
                    operator: In
                    values:
                      - "{{ .Release.Name }}-{{ .Values.version }}-web-pod"
              topologyKey: "kubernetes.io/hostname"

      volumes:
        - name: users-code-path
          hostPath:
            path: /tmp/hexlet-basics
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        - name: docker-secret
          secret:
            secretName: docker-config
            items:
              - key: .dockerconfigjson
                path: config.json

      containers:
      - name: nginx
        image: "{{ .Values.nginx.image.repository }}:{{ .Values.version }}"
        imagePullPolicy: "{{ .Values.nginx.image.imagePullPolicy }}"
        startupProbe:
          httpGet:
            path: /
            port: 8080
          failureThreshold: 12
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        ports:
          - containerPort: 8080
        # resources:
        #   limits:
        #     memory: 100Mi
        #     cpu: 500m
        #   requests:
        #     cpu: 10m

      - name: web
        image: "{{ .Values.web.image.repository }}:{{ .Values.version }}"
        imagePullPolicy: "{{ .Values.web.image.imagePullPolicy }}"
        securityContext:
          privileged: true
        ports:
          - containerPort: 3000
        startupProbe:
          httpGet:
            path: /
            port: 3000
            httpHeaders:
              - name: X-Forwarded-Host
                value: ru.code-basics.com
          failureThreshold: 12
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
            httpHeaders:
              - name: X-Forwarded-Host
                value: ru.code-basics.com
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 3000
            httpHeaders:
              - name: X-Forwarded-Host
                value: ru.code-basics.com
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5

        volumeMounts:
          - mountPath: /tmp/hexlet-basics
            name: users-code-path
          - mountPath: /var/run/docker.sock
            name: docker-sock
          - name: docker-secret
            mountPath: /root/.docker
        envFrom:
          - secretRef:
              name: database-credentials
          - secretRef:
              name: hexlet-basics-secrets
          - secretRef:
              name: github-credentials
          - secretRef:
              name: facebook-credentials
          - secretRef:
              name: sparkpost-credentials
          - configMapRef:
              name: hexlet-basics-data
        env:
          - name: HEXLET_BASICS_RELEASE_VERSION
            value: {{ .Values.version }}
        lifecycle:
          postStart:
            exec:
              command: {{ .Values.slack_notification }}
